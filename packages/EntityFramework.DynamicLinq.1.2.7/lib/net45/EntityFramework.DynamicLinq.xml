<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EntityFramework.DynamicLinq</name>
    </assembly>
    <members>
        <member name="M:System.Linq.Dynamic.Core.Validation.CoreStrings.ArgumentPropertyNull(System.String,System.String)">
            <summary>
            The property '{property}' of the argument '{argument}' cannot be null.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Validation.CoreStrings.ArgumentIsEmpty(System.String)">
            <summary>
            The string argument '{argumentName}' cannot be empty.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Validation.CoreStrings.InvalidEntityType(System.Type,System.String)">
            <summary>
            The entity type '{type}' provided for the argument '{argumentName}' must be a reference type.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Validation.CoreStrings.CollectionArgumentIsEmpty(System.String)">
            <summary>
            The collection argument '{argumentName}' must contain at least one element.
            </summary>
        </member>
        <member name="T:System.Linq.Dynamic.Core.Validation.ValidatedNotNullAttribute">
            <summary>
            To fix 'xxx' is null on at least one execution path. See also https://rules.sonarsource.com/csharp/RSPEC-3900.
            </summary>
        </member>
        <member name="T:System.Reflection.CustomIntrospectionExtensions">
            <summary>
            https://github.com/castleproject/Core/blob/netcore/src/Castle.Core/Compatibility/IntrospectionExtensions.cs
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.DynamicLinq.DynamicFunctions">
            <summary>
            DynamicFunctions (EF.Functions)
            </summary>
        </member>
        <member name="T:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions">
            <summary>
            Provides a set of static Async methods for querying data structures that implement <see cref="T:System.Linq.IQueryable"/>.
            It allows dynamic string based querying. Very handy when, at compile time, you don't know the type of queries that will be generated,
            or when downstream components only return column names to sort and filter by.
            </summary>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.AllAsync(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
                Asynchronously determines whether all the elements of a sequence satisfy a condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that All asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> to calculate the All of.
            </param>
            <param name="predicate">A projection function to apply to each element.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>
                A task that represents the asynchronous operation. The task result contains true if every element of the source sequence passes the test in the specified predicate; otherwise, false.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.AllAsync(System.Linq.IQueryable,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
                Asynchronously determines whether all the elements of a sequence satisfy a condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that All asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> to calculate the All of.
            </param>
            <param name="predicate">A projection function to apply to each element.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation. The task result contains true if every element of the source sequence passes the test in the specified predicate; otherwise, false.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.AnyAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
            <summary>
                Asynchronously determines whether a sequence contains any elements.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> to check for being empty.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation. The task result contains true if the source sequence contains any elements; otherwise, false.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.AnyAsync(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
                Asynchronously determines whether any element of a sequence satisfies a condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> whose elements to test for a condition.
            </param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>
                A task that represents the asynchronous operation. The task result contains true if the source sequence contains any elements; otherwise, false.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.AnyAsync(System.Linq.IQueryable,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
                Asynchronously determines whether any element of a sequence satisfies a condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> whose elements to test for a condition.
            </param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation. The task result contains true if the source sequence contains any elements; otherwise, false.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.AverageAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the average of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported. Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> to calculate the average of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation. The task result contains the average of the sequence of values.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.AverageAsync(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that Average asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> to calculate the average of.
            </param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>true</c> if Average elements in the source sequence pass the test in the specified
                predicate; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.AverageAsync(System.Linq.IQueryable,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
                Asynchronously computes the average of a sequence of values that is obtained by invoking a projection function on each element of the input sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that Average asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> to calculate the average of.
            </param>
            <param name="selector">A projection function to apply to each element.</param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>true</c> if Average elements in the source sequence pass the test in the specified
                predicate; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.CountAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the number of elements in a sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> that contains the elements to be counted.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the number of elements in the input sequence.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.CountAsync(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
                Asynchronously returns the number of elements in a sequence that satisfy a condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> that contains the elements to be counted.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the number of elements in the sequence that satisfy the condition in the predicate
                function.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.CountAsync(System.Linq.IQueryable,System.Threading.CancellationToken,System.String,System.Object[])">
            <summary>
                Asynchronously returns the number of elements in a sequence that satisfy a condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> that contains the elements to be counted.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the number of elements in the sequence that satisfy the condition in the predicate
                function.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.FirstAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the first element of a sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> to return the first element of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the first element in <paramref name="source" />.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.FirstAsync(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
                Asynchronously returns the first element of a sequence that satisfies a specified condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> to return the first element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the first element in <paramref name="source" /> that passes the test in
                <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.FirstAsync(System.Linq.IQueryable,System.Threading.CancellationToken,System.String,System.Object[])">
            <summary>
                Asynchronously returns the first element of a sequence that satisfies a specified condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> to return the first element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the first element in <paramref name="source" /> that passes the test in
                <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.FirstOrDefaultAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> to return the first element of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>default</c> if
                <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.FirstOrDefaultAsync(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
                Asynchronously returns the first element of a sequence that satisfies a specified condition
                or a default value if no such element is found.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> to return the first element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>default</c> if <paramref name="source" />
                is empty or if no element passes the test specified by <paramref name="predicate" /> ; otherwise, the first
                element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.FirstOrDefaultAsync(System.Linq.IQueryable,System.Threading.CancellationToken,System.String,System.Object[])">
            <summary>
                Asynchronously returns the first element of a sequence that satisfies a specified condition
                or a default value if no such element is found.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> to return the first element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>default</c> if <paramref name="source" />
                is empty or if no element passes the test specified by <paramref name="predicate" /> ; otherwise, the first
                element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.LastAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the last element of a sequence. [Maybe not supported : https://msdn.microsoft.com/en-us/library/bb738550.aspx]
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> to return the last element of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the last element in <paramref name="source" />.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.LastAsync(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
                Asynchronously returns the last element of a sequence that satisfies a specified condition. [Maybe not supported : https://msdn.microsoft.com/en-us/library/bb738550.aspx]
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> to return the last element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the last element in <paramref name="source" /> that passes the test in
                <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.LastAsync(System.Linq.IQueryable,System.Threading.CancellationToken,System.String,System.Object[])">
            <summary>
                Asynchronously returns the last element of a sequence that satisfies a specified condition. [Maybe not supported : https://msdn.microsoft.com/en-us/library/bb738550.aspx]
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> to return the last element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the last element in <paramref name="source" /> that passes the test in
                <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.LastOrDefaultAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the last element of a sequence, or a default value if the sequence contains no elements. [Maybe not supported : https://msdn.microsoft.com/en-us/library/bb738550.aspx]
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> to return the last element of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>default</c> if
                <paramref name="source" /> is empty; otherwise, the last element in <paramref name="source" />.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.LastOrDefaultAsync(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
                Asynchronously returns the last element of a sequence that satisfies a specified condition
                or a default value if no such element is found. [Maybe not supported : https://msdn.microsoft.com/en-us/library/bb738550.aspx]
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> to return the last element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>default</c> if <paramref name="source" />
                is empty or if no element passes the test specified by <paramref name="predicate" /> ; otherwise, the last
                element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.LastOrDefaultAsync(System.Linq.IQueryable,System.Threading.CancellationToken,System.String,System.Object[])">
            <summary>
                Asynchronously returns the last element of a sequence that satisfies a specified condition
                or a default value if no such element is found. [Maybe not supported : https://msdn.microsoft.com/en-us/library/bb738550.aspx]
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> to return the last element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains <c>default</c> if <paramref name="source" />
                is empty or if no element passes the test specified by <paramref name="predicate" /> ; otherwise, the last
                element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.LongCountAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the number of elements in a sequence.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> that contains the elements to be counted.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the number of elements in the input sequence.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.LongCountAsync(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
                Asynchronously returns the number of elements in a sequence that satisfy a condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> that contains the elements to be counted.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the number of elements in the sequence that satisfy the condition in the predicate
                function.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.LongCountAsync(System.Linq.IQueryable,System.Threading.CancellationToken,System.String,System.Object[])">
            <summary>
                Asynchronously returns the number of elements in a sequence that satisfy a condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> that contains the elements to be counted.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the number of elements in the sequence that satisfy the condition in the predicate
                function.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.SingleOrDefaultAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
            <summary>
                Asynchronously returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists.
                This method throws an exception if more than one element satisfies the condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> to return the single element of.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation. The task result contains the single element of the input sequence that satisfies the condition in predicate.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.SingleOrDefaultAsync(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
                Asynchronously returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists.
                This method throws an exception if more than one element satisfies the condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> to return the single element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>
                A task that represents the asynchronous operation. The task result contains the single element of the input sequence that satisfies the condition in <paramref name="predicate" />, or default if no such element is found.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.SingleOrDefaultAsync(System.Linq.IQueryable,System.Threading.CancellationToken,System.String,System.Object[])">
            <summary>
                Asynchronously returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists.
                This method throws an exception if more than one element satisfies the condition.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> to return the single element of.
            </param>
            <param name="predicate"> A function to test each element for a condition. </param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation. The task result contains the single element of the input sequence that satisfies the condition in <paramref name="predicate" />, or default if no such element is found.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.SumAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> that contains the elements to be summed.
            </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains sum of the values in the sequence.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.SumAsync(System.Linq.IQueryable,System.String,System.Object[])">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> that contains the elements to be summed.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the number of elements in the sequence that satisfy the condition in the predicate
                function.
            </returns>
        </member>
        <member name="M:EntityFramework.DynamicLinq.EntityFrameworkDynamicQueryableExtensions.SumAsync(System.Linq.IQueryable,System.Threading.CancellationToken,System.String,System.Object[])">
            <summary>
                Asynchronously computes the sum of a sequence of values.
            </summary>
            <remarks>
                Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
                that any asynchronous operations have completed before calling another method on this context.
            </remarks>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable" /> that contains the elements to be summed.
            </param>
            <param name="selector"> A projection function to apply to each element. </param>
            <param name="args">An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings.</param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
                The task result contains the sum of the projected values.
            </returns>
        </member>
    </members>
</doc>
